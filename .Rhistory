cat("Calculating TPA and Diameter...\n")
# Compute TPA
GRM[, INGROWTHTPA    := (COMPONENT=="INGROWTH") * TPAGROW_UNADJ     ]
GRM[, MORTALITY1TPA  := (COMPONENT=="MORTALITY1") * TPAGROW_UNADJ   ]
GRM[, MORTALITY2TPA  := (COMPONENT=="MORTALITY2") * TPAGROW_UNADJ   ]
GRM[, MORTALITYTPA   := MORTALITY1TPA + MORTALITY2TPA               ]
# Initial number of trees is current survivors plus those that died during the resurvey period.
GRM[, start1tpa      := SURVIVORTPA + MORTALITYTPA                  ]
GRM[, PREVTPAsum     := sumNA(start1tpa), by=PLT_CN                 ]  # "startsumTPA"
# Final number of trees is current survivors plus new trees that cross the 5" threshold
GRM[, end1tpa        := SURVIVORTPA + INGROWTHTPA                   ]
GRM[, TPAsum         := sumNA(end1tpa), by=PLT_CN                   ]  # "endsumTPA"
# Compute plot mean diameters
GRM[, PREVDIAmean    := meanNA(DIA_BEGIN), by=PLT_CN                ]  # "DIAbeginmean"
GRM[, DIAmean        := meanNA(DIA_END),   by=PLT_CN                ]  # "DIAendmean"
# --- Subset for output
#GRM.out = GRM[, .(PLT_CN, TRE_CN, PREVTPAsum, TPAsum, PREVDIAmean, DIAmean), with=F]
#command above doesn't work. SEems to be because its formatted within the data table pacakge.
#Pretty sure this is just grabbing the columns in the GRM table we actually care about.
GRM.out = GRM[, list("PLT_CN", "TRE_CN", "PREVTPAsum", "TPAsum", "PREVDIAmean", "DIAmean")]
# ---------- TREE
#this is where we grab the actual tree DBH before/after and species codes from our sites.
#We have 8.1 million trees in here.
#We have 363k sites
#ok-  there are 2113535 unique CN values in the TREE data.table genreated here once filtered, pre-PFT assignment.
#however, there are only 1593825 unique "PREV_TRE_CN" values in the data.table.
cat("Query TREE...\n")
# --- Query
query = paste('SELECT
cn, prev_tre_cn, plt_cn, invyr, condid, dia, tpa_unadj, spcd, stocking, statuscd,
prevdia, prev_status_cd, p2a_grm_flg, reconcilecd
FROM tree WHERE
(prevdia>5 OR dia>5) AND (statuscd=1 OR prev_status_cd=1) AND p2a_grm_flg!=\'N\'  AND
statecd IN (', paste(states,collapse=','), ')')
tic() # ~ 10 min
TREE = as.data.table(db.query(query, con=fia.con))
setnames(TREE, toupper(names(TREE)))
toc()
# --- Filter TREE
cat("Filter TREE ...\n")
# By plot/cond criteria
TREE = TREE[ PLT_CN %in% PC$PLT_CN ]
# CONDID ("Remove edge effects" --TA)
TREE[, CONmax := maxNA(CONDID), by=PLT_CN]
# STATUSCD
# *** RK: Next line looks wrong. It's a sum, not max, despite the name. I did rewrite the line but this is equivalent to what Travis had so keeping for now.
TREE[, STATUSCDmax := sumNA(3*as.integer(STATUSCD==3)), by=PLT_CN]
# RECONCILECD
TREE[is.na(RECONCILECD), RECONCILECD :=0] # Set NA values to 0 (unused)
# Filter
TREE = TREE[ CONmax==1 & INVYR<2014 & STATUSCDmax!=3 & STATUSCD!=0 & RECONCILECD<=4 ]
# --- Merge in PFTs
#you need a mycorrhizal list, and to pop it in right here.
cat("Merge in PFTs and mycorrhizal associations...\n")
tic() # ~ 1.5 min
MCDPFT = as.data.table(read.csv("From_T.Andrews/gcbPFT.csv", header = TRUE)) #colin loads in mycorrhizal associations
CA_myctype = as.data.table(read.csv("mycorrhizal_SPCD_data.csv",header=TRUE))
CA_myctype = CA_myctype[,c("SPCD","MYCO_ASSO"),with=F]
TREE = merge(TREE, MCDPFT, all.x=T, by = "SPCD")
TREE = merge(TREE, CA_myctype, all.x=T, by = "SPCD") #colin merges in mycorrhizal associations
toc()
cat("Connect consecutive observations...\n")
tic() # ~20 sec
#again, changing code here as above, as the original subset line was failing.
#TREE.prev = TREE[,.(CN, STOCKING, SPCD, TPA_UNADJ, PFT)]
TREE.prev = TREE[, list(CN, STOCKING, SPCD, TPA_UNADJ, PFT, MYCO_ASSO)]
setnames(TREE.prev, paste0("PREV_TRE_",names(TREE.prev)))
setnames(TREE.prev, 1, "CN") #rename PREV_TRE_CN back to CN, for matching later on. CA edit.
toc()
TREE.prev[, CN := as.integer64(CN)] #colin added this when he changed PRE_TRE_CN back to CN
TREE[, CN := as.integer64(CN)]  #colin added this when he changed PRE_TRE_CN back to CN
TREE = merge(TREE, TREE.prev, all.x=T, by="CN")
?
()
version
..
ls(..)
setwd(..)
setwd(../)
setwd(/..)
getwd()
rm(list=ls())
library(data.table) #note, version 1.9.4 or higher must be installed, otherwise you will have trouble running particular commands.
library(RPostgreSQL)
library(bit64)
# library(PEcAn.DB)
source('../fia_psql/Scripts/Distribute/PSQL_utils.R') #changed to actually find and load this.
sumNA  = function(x) sum(x,na.rm=T)
meanNA = function(x) mean(x,na.rm=T)
maxNA  = function(x) max(x,na.rm=T)
tic = function() assign("timer", Sys.time(), envir=.GlobalEnv)
toc = function() print(Sys.time()-timer)
bigtime = Sys.time()
dbsettings = list(
user     = "bety",             # PSQL username  ###NOTE colin changed the info here to get into the DB @ BU. this works.
password = "",                 # PSQL password
dbname   = "fia5",             # PSQL database name
host     = "psql-pecan.bu.edu",# PSQL server address (don't change unless server is remote)
driver   = 'PostgreSQL',       # DB driver (shouldn't need to change)
write    = FALSE               # Whether to open connection with write access.
)
lon.bounds = c(-95,999)
lat.bounds = c(-999,999)
file.pft = "From_T.Andrews/gcbPFT.csv" #changed to actually find this file within the repo.
# file.pft = "~/rykelly/PhaseSpace/gcbPFT.csv"
file.TA = 'From_T.Andrews/ESMraw.rds' #this file doesn't exist in the repo.
file.out = "testout.rds" #changed the name oof the output file.
# -----------------------------
# Open connection to database
fia.con = db.open(dbsettings)
# ---------- PLOT & COND DATA
# --- Query PLOT
cat("Query PLOT...\n")
query = paste('SELECT
cn, statecd, prev_plt_cn, remper
FROM plot WHERE remper>3 AND remper<9.5 AND designcd=1 AND statecd<=56 AND ',
'lon>', min(lon.bounds),' AND lon<', max(lon.bounds), ' AND ',
'lat>', min(lat.bounds),' AND lat<', max(lat.bounds))
tic() # ~10 sec
PLOT = as.data.table(db.query(query, con=fia.con))
setnames(PLOT, toupper(names(PLOT)))
setnames(PLOT,"CN","PLT_CN")
toc()
# Remove states that haven't been resurveyed
PLOT[, REMPERTOT := sumNA(REMPER), by=STATECD]
PLOT = PLOT[ REMPERTOT>10, ]
# Remove this one miscellaneous plot, per TA
PLOT = PLOT[ PLT_CN!= 134680578010854 ]
# Store statecd and state names
states = sort(unique(PLOT$STATECD))
n.state = length(states)
surv = db.query('SELECT statecd,statenm FROM survey', con=fia.con)
state.names = surv$statenm[match(states,surv$statecd)]
# --- Query COND
cat("Query COND...\n")
query = paste('SELECT
plt_cn, condid, stdorgcd
FROM cond WHERE
stdorgcd=0 AND ',
'statecd IN (', paste(states,collapse=','), ')')
tic() # ~ 15 sec
COND = as.data.table(db.query(query, con=fia.con))
setnames(COND, toupper(names(COND)))
toc()
# Remove all plots with more than 1 condition
COND[, CONmax := maxNA(CONDID), by=PLT_CN]
# *** RK: This is slightly wrong. In a few cases plots have CONDID>1, but still only have a single condition. This would work better:
#     COND[, CONmax2 := .N, by=PLT_CN]
COND = COND[ CONmax==1,]
# --- Merge PLOT and COND
cat("Merge PLOT and COND ...\n")
tic()
PC = merge(COND, PLOT, by="PLT_CN")
toc()
# ---------- RESURVEY DATA
# --- Query
cat("Query TREE_GRM_ESTN...\n")
query = paste('SELECT
plt_cn, invyr, tpagrow_unadj, dia_begin, dia_end, component, tre_cn, remper, statecd
FROM tree_grm_estn WHERE ',
#                 'dia_begin>5 AND ',
'statecd IN (', paste(states,collapse=','),') AND ',
'estn_type=\'AL\' AND land_basis=\'TIMBERLAND\'')
tic()
GRM = as.data.table(db.query(query, con=fia.con))
setnames(GRM, toupper(names(GRM)))
toc()
# --- Filtering
cat("Filtering TREE_GRM_ESTN...\n")
# By plot/cond criteria
GRM = GRM[ PLT_CN %in% PC$PLT_CN ]
# Assign GRM$START + GRM$CUT and restrict to cut==0, start>0
GRM[, START      := INVYR - REMPER                                  ]
GRM[, REMPER := NULL]
GRM[, CUT1TPA    := (COMPONENT=="CUT1") * TPAGROW_UNADJ             ]
GRM[, CUT2TPA    := (COMPONENT=="CUT2") * TPAGROW_UNADJ             ]
GRM[, CUT        := sumNA(CUT2TPA + CUT1TPA), by=PLT_CN             ]
GRM = GRM[ START>0 & CUT==0, ]
# Assign Reversion/Diversion, and exclude plots with either
GRM[, DIVERSION1TPA  := (COMPONENT=="DIVERSION1") * TPAGROW_UNADJ   ]
GRM[, DIVERSION2TPA  := (COMPONENT=="DIVERSION2") * TPAGROW_UNADJ   ]
GRM[, REVERSION1TPA  := (COMPONENT=="REVERSION1") * TPAGROW_UNADJ   ]
GRM[, REVERSION2TPA  := (COMPONENT=="REVERSION2") * TPAGROW_UNADJ   ]
GRM[, REDIV          := sumNA(REVERSION2TPA+REVERSION1TPA+DIVERSION2TPA+DIVERSION1TPA), by=PLT_CN]
GRM = GRM[ REDIV==0, ]
# Assign SURVIVORTPA, and remove records from any state with <1000 measured trees
GRM[, SURVIVORTPA    := (COMPONENT=="SURVIVOR") * TPAGROW_UNADJ     ]
GRM[, TPATOT         := sumNA(SURVIVORTPA), by=STATECD              ]
GRM = GRM[ TPATOT>1000, ]
# --- Assign additional variables
cat("Calculating TPA and Diameter...\n")
# Compute TPA
GRM[, INGROWTHTPA    := (COMPONENT=="INGROWTH") * TPAGROW_UNADJ     ]
GRM[, MORTALITY1TPA  := (COMPONENT=="MORTALITY1") * TPAGROW_UNADJ   ]
GRM[, MORTALITY2TPA  := (COMPONENT=="MORTALITY2") * TPAGROW_UNADJ   ]
GRM[, MORTALITYTPA   := MORTALITY1TPA + MORTALITY2TPA               ]
# Initial number of trees is current survivors plus those that died during the resurvey period.
GRM[, start1tpa      := SURVIVORTPA + MORTALITYTPA                  ]
GRM[, PREVTPAsum     := sumNA(start1tpa), by=PLT_CN                 ]  # "startsumTPA"
# Final number of trees is current survivors plus new trees that cross the 5" threshold
GRM[, end1tpa        := SURVIVORTPA + INGROWTHTPA                   ]
GRM[, TPAsum         := sumNA(end1tpa), by=PLT_CN                   ]  # "endsumTPA"
# Compute plot mean diameters
GRM[, PREVDIAmean    := meanNA(DIA_BEGIN), by=PLT_CN                ]  # "DIAbeginmean"
GRM[, DIAmean        := meanNA(DIA_END),   by=PLT_CN                ]  # "DIAendmean"
# --- Subset for output
GRM.out = GRM[, .(PLT_CN, TRE_CN, PREVTPAsum, TPAsum, PREVDIAmean, DIAmean)]
# ---------- TREE
cat("Query TREE...\n")
# --- Query
query = paste('SELECT
cn, prev_tre_cn, plt_cn, invyr, condid, dia, tpa_unadj, spcd, stocking, statuscd,
prevdia, prev_status_cd, p2a_grm_flg, reconcilecd
FROM tree WHERE
(prevdia>5 OR dia>5) AND (statuscd=1 OR prev_status_cd=1) AND p2a_grm_flg!=\'N\'  AND
statecd IN (', paste(states,collapse=','), ')')
tic() # ~ 10 min
TREE = as.data.table(db.query(query, con=fia.con))
setnames(TREE, toupper(names(TREE)))
toc()
# --- Filter TREE
cat("Filter TREE ...\n")
# By plot/cond criteria
TREE = TREE[ PLT_CN %in% PC$PLT_CN ]
# CONDID ("Remove edge effects" --TA)
TREE[, CONmax := maxNA(CONDID), by=PLT_CN]
# STATUSCD
# *** RK: Next line looks wrong. It's a sum, not max, despite the name. I did rewrite the line but this is equivalent to what Travis had so keeping for now.
TREE[, STATUSCDmax := sumNA(3*as.integer(STATUSCD==3)), by=PLT_CN]
# RECONCILECD
TREE[is.na(RECONCILECD), RECONCILECD :=0] # Set NA values to 0 (unused)
# Filter
TREE = TREE[ CONmax==1 & INVYR<2014 & STATUSCDmax!=3 & STATUSCD!=0 & RECONCILECD<=4 ]
# --- Merge in PFTs and mycorrhizal associations
cat("Merge in PFTs and mycorrhizal associations...\n")
tic() # ~ 1.5 min
MCDPFT = as.data.table(read.csv("From_T.Andrews/gcbPFT.csv", header = TRUE))
CA_myctype = as.data.table(read.csv("mycorrhizal_SPCD_data.csv",header=TRUE)) #colin loads in mycorrhizal associations
CA_myctype = CA_myctype[,c("SPCD","MYCO_ASSO"),with=F] #colin loads in mycorrhizal associations
TREE = merge(TREE, MCDPFT, all.x=T, by = "SPCD")
TREE = merge(TREE, CA_myctype, all.x=T, by = "SPCD") #colin merges in mycorrhizal associations
toc()
# --- Connect PREV_CN for each tree prior to subset
cat("Connect consecutive observations...\n")
tic() # ~20 sec
TREE.prev = TREE[,.(CN, STOCKING, SPCD, TPA_UNADJ, PFT)]
setnames(TREE.prev, paste0("PREV_TRE_",names(TREE.prev)))
toc()
# Convert PREV_TRE_CN columns to integer64 (have experienced crashes otherwise. memory leak?) #these commands fail, but code still runs.
TREE.prev[, PREV_TRE_CN := as.integer64(PREV_TRE_CN)]
TREE[, PREV_TRE_CN := as.integer64(PREV_TRE_CN)]
tic()
TREE = merge(TREE, TREE.prev, all.x=T, by="PREV_TRE_CN")
setnames(TREE,"CN","TRE_CN")
toc()
# --- Define DIA and STOCKING columns for trees >5"
cat("Calculate DIA and STOCKING...\n")
# DIAmean of DIA>5
TREE[DIA>=5 & STATUSCD==1,                                   DIA5alive := DIA      ]
TREE[, DIA5meanalive     := meanNA(DIA5alive), by=PLT_CN                         ]
TREE[PREVDIA>=5 & PREV_STATUS_CD==1,                     PREVDIA5alive := PREVDIA  ]
TREE[, PREVDIA5meanalive := meanNA(PREVDIA5alive), by=PLT_CN                     ]
#Stocking of plots for trees with DIA>5
TREE[DIA5alive>0, STOCKING5 := STOCKING]
TREE[, STOCKING5mid := sumNA(STOCKING5), by=PLT_CN]
TREE[PREVDIA5alive>0, PREVSTOCKING5 := PREV_TRE_STOCKING]
TREE[, PREVSTOCKING5mid := sumNA(PREVSTOCKING5), by=PLT_CN]
# ---------- MERGE
cat("Final merge...\n")
ALL = merge(GRM, TREE, all.x=T, by='TRE_CN')
ALL[, c("PLT_CN.x","INVYR.x") := list(NULL,NULL)]
setnames(ALL, c("PLT_CN.y","INVYR.y"), c("PLT_CN","INVYR"))
ALL = merge(ALL, PC, by='PLT_CN')
ALL[, c("STATECD.x","CONmax.x") := list(NULL,NULL)]
setnames(ALL, c("STATECD.y","CONmax.y"), c("STATECD","CONmax"))
setnames(ALL, "START", "PREVYR")
file.out = "mycFIA.out.rds" #changed the name oof the output file.
file.out
# --- Save outputs
cat("Save...\n")
tic()
saveRDS(ALL, file = file.out)
toc()
getwd()
gc()
source('~/.active-rstudio-document', echo=TRUE)
db.close(fia.con)
print(Sys.time()-bigtime)
rm(list=ls())
library(data.table)
library(data.table)
getwd()
ls()
file.in.me = "mycFIA.out.rds"
TA.only = F
thin.plot = 10000
x.lim = c(10,50) #c(14, 43)
y.lim = c(0,2000) #c(50,950)
dia.bin   = 2.5
dia.lim   = c(0,50)
use.tpa   = T
tpa.bin   = 100
tpa.lim   = c(0,1500)
stock.bin = 10
bin.min.n = 100
out.dir        = '/Work/Research/Macrosystems/FIA Phase Space/'
file.name.base = 'ESM_RK_v04_'
save.fig   = T
fig.format = 'pdf'
save.dat   = T
file.name.base = paste0(file.name.base,
ifelse(TA.only, 'TA.', 'ALL.'),
"d",dia.bin,".",
ifelse(use.tpa, paste0("t",tpa.bin), paste0("s",stock.bin)), ".",
"n", bin.min.n)
TA.only.store
if(!exists("TA.only.store")) TA.only.store=TA.only
if(!exists("file.in.me.store")) file.in.me.store=file.in.me
if(!exists("file.in.TA.store")) file.in.TA.store=file.in.TA
if(!exists("x") | TA.only.store!=TA.only | file.in.me.store!=file.in.me | file.in.TA.store!=file.in.TA) {
cat("Reloading data...")
TA.only.store = TA.only; file.in.me.store = file.in.me; file.in.TA.store = file.in.TA
q = as.data.table(readRDS(file.in.me))
setnames(q, tolower(names(q)))
q[, plt_cn := as.character(plt_cn)]
if(TA.only) q = q[in.ta==1]
x = as.data.table(readRDS(file.in.TA))
setnames(x, tolower(names(x)))
x[, plt_cn := as.character(plt_cn)]
x[, prevdiamean := mean(prevdia, na.rm=T), by=plt_cn]
x[, diamean     := mean(dia, na.rm=T), by=plt_cn]
cat("done!\n")
}
soils.1 <- read.csv('FIA_soils/SOILS_LAB.CSV')
nrow(soils.1)
head(soil.1)
head(soils.1)
soils.1$CN[1]
options(scipen=999)
soils.1 <- read.csv('FIA_soils/SOILS_LAB.CSV')
head(soils.1)
soil.loc  <- read.csv('FIA_soils/SOILS_SAMPLE_LOC.CSV')
head(soil.loc)
nrow(soil.loc)
nrow(soil.chem)
soil.chem <- read.csv('FIA_soils/SOILS_LAB.CSV')
soil.chem
nrow(soil.chem)
nrow(soil.loc)
head(soil.chem)
head(soil.loc)
soil.chem$LAYER_TYPE
rm(list=ls())
library(data.table) #note, version 1.9.4 or higher must be installed, otherwise you will have trouble running particular commands.
library(RPostgreSQL)
library(bit64)
source('required_products_utilities/PSQL_utils.R') #this will give you the tools needed to work with the PSQL database.
library(bit64)
sumNA  = function(x) sum(x,na.rm=T)
meanNA = function(x) mean(x,na.rm=T)
maxNA  = function(x) max(x,na.rm=T)
tic = function() assign("timer", Sys.time(), envir=.GlobalEnv)
toc = function() print(Sys.time()-timer)
bigtime = Sys.time()
dbsettings = list(
user     = "bety",             # PSQL username  ###NOTE colin changed the info here to get into the DB @ BU. this works.
password = "",                 # PSQL password
dbname   = "fia5",             # PSQL database name
host     = "psql-pecan.bu.edu",# PSQL server address (don't change unless server is remote)
driver   = 'PostgreSQL',       # DB driver (shouldn't need to change)
write    = FALSE               # Whether to open connection with write access.
)
lon.bounds = c(-95,999)
lat.bounds = c(-999,999)
file.pft = " require_products_utilities/gcbPFT.csv" #changed to actually find this file within the repo.
file.out = "mycFIA.out.rds" #changed the name of the output file.
fia.con = db.open(dbsettings)
file.soil = "FIA_soils/FIAsoil_output_CA.csv"
head(file.soil)
file.soil = read.csv("FIA_soils/FIAsoil_output_CA.csv")
head(file.soil)
nrow(file.soil)
#kill scientific notation
options(scipen=999)
#load in soil chemical and location data
#FF references to litter + humus layer. MIN_1 is 0-10cm, MIN_2 is 10-20cm
#FF has bulk density, total C, total N and soil moisture measurements in the chemistry table. Has 4 measurements of depth (North, South, East, West) in location table.
#MS has everything from FF plus soil P, pH, micronutrients, and inorganic C (if pH > 7.5)
soil.chem.FIA <- read.csv('FIA_soils/SOILS_LAB.CSV') #5403 unique sites here.
soil.loc  <- read.csv('FIA_soils/SOILS_SAMPLE_LOC.CSV') #7880 unique sites in here.
head(soil.chem.FIA)
head(soil.loc)
cat("Query PLOT...\n")
query = paste('SELECT
cn, statecd, prev_plt_cn, remper, lat, lon, elev, designcd
FROM plot WHERE  statecd<=56')
tic() # ~10 sec
PLOT = as.data.table(db.query(query, con=fia.con))
setnames(PLOT, toupper(names(PLOT)))
setnames(PLOT,"CN","PLT_CN")
toc()
head(file.soil)
test <- PLOT[PLT_CN %in% file.soil$PLT_CN]
head(test)
nrow(test)
test <- unique(soil.codes$DESIGNCD)
soil.codes <- PLOT[PLT_CN %in% file.soil$PLT_CN]
test <- unique(soil.codes$DESIGNCD)
test
nrow(PLOT)
soil.codes <- PLOT[PLT_CN %in% file.soil$PLT_CN]
soil.codes <- unique(soil.codes$DESIGNCD)
soil.codes
head(PLOT)
test <- PLOT[DESIGNCD %in% soil.codes]
nrow(test)
nrow(PLOT)
test<- PLOT[PLT_CN %in% file.soil$PLT_CN]
nrow(test)
PLOT <- PLOT[DESIGNCD %in% soil.codes]
nrow(PLOT)
test<- PLOT[PLT_CN %in% file.soil$PLT_CN]
nrow(test)
PLOT[, REMPERTOT := sumNA(REMPER), by=STATECD]
nrow(PLOT)
test = PLOT[ REMPERTOT>10, ]
nrow(test)
nrow(PLOT)
PLOT = PLOT[ PLT_CN!= 134680578010854 ]
nrow(PLOT)
head(PLOT)
states = sort(unique(PLOT$STATECD))
states
n.state = length(states)
surv = db.query('SELECT statecd,statenm FROM survey', con=fia.con)
state.names = surv$statenm[match(states,surv$statecd)]
state.names
# --- Query COND ~1 minute.
cat("Query COND...\n")
query = paste('SELECT
plt_cn, condid, stdorgcd
FROM cond WHERE
stdorgcd=0 AND ',
'statecd IN (', paste(states,collapse=','), ')')
tic() # ~ 15 sec
COND = as.data.table(db.query(query, con=fia.con))
setnames(COND, toupper(names(COND)))
toc()
cat("Query COND...\n")
query = paste('SELECT
plt_cn, condid, stdorgcd
FROM cond WHERE
stdorgcd=0 AND ',
'statecd IN (', paste(states,collapse=','), ')')
tic() # ~ 15 sec
COND = as.data.table(db.query(query, con=fia.con))
setnames(COND, toupper(names(COND)))
toc()
head(COND)
COND = subset(COND,COND$CONDID==1)
nrow(COND)
nrow(PLOT)
# --- Merge PLOT and COND
cat("Merge PLOT and COND ...\n")
tic()
PC = merge(COND, PLOT, by="PLT_CN")
toc()
nrow(PC)
head(PC
)
length(unique(PC$PLT_CN))
nrow(PC)
length(PC[PLT_CN %in% file.soil$PLT_CN])
head(file.soil)
length(file.soil)
head(file.soil)
file.soil
nrow(file.soil)
length(file.soil$PLT_CN)
test<- PC[PLT_CN %in% file.soil$PLT_CN]
nrow(test)
# ---------- RESURVEY DATA ~12 mins.
# --- Query
cat("Query TREE_GRM_ESTN...\n")
query = paste('SELECT
plt_cn, invyr, tpagrow_unadj, dia_begin, dia_end, component, tre_cn, remper, statecd
FROM tree_grm_estn WHERE ',
#                 'dia_begin>5 AND ',
'statecd IN (', paste(states,collapse=','),') AND ',
'estn_type=\'AL\' AND land_basis=\'TIMBERLAND\'')
tic()
GRM = as.data.table(db.query(query, con=fia.con))
setnames(GRM, toupper(names(GRM)))
toc()
dbsettings = list(
user     = "bety",             # PSQL username  ###NOTE colin changed the info here to get into the DB @ BU. this works.
password = "",                 # PSQL password
dbname   = "fia5",             # PSQL database name
host     = "psql-pecan.bu.edu",# PSQL server address (don't change unless server is remote)
driver   = 'PostgreSQL',       # DB driver (shouldn't need to change)
write    = FALSE               # Whether to open connection with write access.
)
fia.con = db.open(dbsettings)
tic()
GRM = as.data.table(db.query(query, con=fia.con))
setnames(GRM, toupper(names(GRM)))
toc()
soil.loc  <- read.csv('FIA_soils/SOILS_SAMPLE_LOC.CSV') #7880 unique sites in here.
all.soils<- read.csv('FIA_soils/SOILS_LAB.CSV')
head(soil.loc)
getwd
getwd()
